#version 450

layout(location = 0) in vec3 vPosition;
in vec3 vNormal;
in vec3 uv;

uniform sampler2DArray textureArray;

uniform vec3 vColor;
uniform mat4 worldToProj_matrix;
uniform vec3 camera;
uniform uint dataSize;

uniform vec3 lightColor;
uniform float lightIntensity;
uniform int numLights;  // Number of active lights

out vec3 color;
out float a;

const int MAX_COLLISIONS_REFLECTION = 20;
const int MAX_COLLISIONS_SHADOW = 10;
const vec3 defaultColor = vec3(0.64313725, 0.45490196, 0.28627451);

//collisions will hold the index of the nbVertices in data
//distances will hold the distances of each sphere to help the sorting
uint[MAX_COLLISIONS_REFLECTION] collisions;
float[MAX_COLLISIONS_REFLECTION] distances;

layout(std430, binding = 0) buffer dataBuffer {
    float data[];
};

layout(std430, binding = 1) buffer lightBuffer {
    float lightPositions[];
};


struct CollisionData {
    vec3 vertex;
    vec3 color;
};

/*vec3 checkCollisionTriangle(vec3 v1, vec3 v2, vec3 v3, vec3 ray) {
    const float EPSILON = 0.0001;

    //we get vector from camera center to triangle edges
    vec3 edge1 = v2 - v1;
    vec3 edge2 = v3 - v1;

    vec3 h = cross(ray, edge2);
    float a = dot(edge1, h);

    if (abs(a) < EPSILON){
        return vec3(0.0);
    }

    float f = 1.0 / a;
    vec3 s = ray - v1;
    float u = dot(s,h)*f;
    if (u < 0.0 || u > 1.0){
        return vec3(0.0);
    }

    vec3 q = cross(s, edge1);
    float v = f * dot(ray, q);

    // Check if the intersection point is outside the triangle
    if (v < 0.0 || u + v > 1.0) {
        return vec3(0.0); // Return zero vector indicating no intersection
    }

    float t = f * dot(edge2, q);
    if (t > EPSILON){
        vec3 intersectionPoint = v1 + u * edge1 + v * edge2;
        return intersectionPoint;
    }else{
        return vec3(0.0);
    }
}*/

bool checkCollisionTriangle(vec3 v1, vec3 v2, vec3 v3, vec3 vertex1, vec3 vertex2) {
    vec3 rayOrigin = vertex1;
    vec3 rayDir = normalize(vertex2 - vertex1);

    vec3 edge1 = v2 - v1;
    vec3 edge2 = v3 - v1;
    vec3 pvec = cross(rayDir, edge2);
    float det = dot(edge1, pvec);

    if (det > -0.0001 && det < 0.0001) {
        return false; // Ray and triangle are parallel
    }

    float invDet = 1.0 / det;
    vec3 tvec = rayOrigin - v1;
    float u = dot(tvec, pvec) * invDet;

    if (u < 0.0 || u > 1.0) {
        return false; // Intersection point is outside the triangle
    }

    vec3 qvec = cross(tvec, edge1);
    float v = dot(rayDir, qvec) * invDet;

    if (v < 0.0 || u + v > 1.0) {
        return false; // Intersection point is outside the triangle
    }

    float t = dot(edge2, qvec) * invDet;

    if (t > 0.0 && t < 1.0) {
        return true; // Intersection with triangle found
    }

    return false; // No intersection with triangle found
}


/*bool checkSphereCollision(vec3 spherePosition, float radius, vec3 ray) {
    vec3 oc = vPosition - spherePosition;
    float a = dot(ray, ray);
    float b = 2.0 * dot(oc, ray);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b * b - 4.0 * a * c;

    if (discriminant < 0.0) {
        return false;  // No collision
    }

    float sqrtDiscriminant = sqrt(discriminant);
    float t1 = (-b - sqrtDiscriminant) / (2.0 * a);
    float t2 = (-b + sqrtDiscriminant) / (2.0 * a);

    if (t1 >= 0.0 || t2 >= 0.0) {
        return true;  // Collision detected
    }

    return false;  // No collision
}*/

bool checkSphereCollision(vec3 center, float radius, vec3 vertex1, vec3 vertex2) {
    vec3 rayOrigin = vertex1;
    vec3 rayDir = normalize(vertex2 - vertex1);

    vec3 oc = rayOrigin - center;
    float a = dot(rayDir, rayDir);
    float b = 2.0 * dot(oc, rayDir);
    float c = dot(oc, oc) - radius * radius;

    float discriminant = b * b - 4.0 * a * c;

    if (discriminant > 0.0) {
        float t1 = (-b - sqrt(discriminant)) / (2.0 * a);
        float t2 = (-b + sqrt(discriminant)) / (2.0 * a);

        if (t1 >= 0.0 && t1 <= 1.0) {
            return true; // Intersection with sphere found
        }

        if (t2 >= 0.0 && t2 <= 1.0) {
            return true; // Intersection with sphere found
        }
    }

    return false; // No intersection with sphere found
}


void insert(float distance, uint index, int size){
    if (distance > distances[size-1])
        return;

    int insertIndex = 0;
    // Find the index to insert the value
    for (int i = 0; i < size; i++) {
        if (distances[i] > distance) {
            insertIndex = i;
            break;
        }
        insertIndex = i+1;
    }

    // Shift elements to make room for the new value
    for (int i = size - 1; i >= insertIndex; i--) {
        distances[i] = distances[i - 1];
        collisions[i] = collisions[i - 1];
    }

    // Insert the value at the determined index
    distances[insertIndex] = distance;
    collisions[insertIndex] = index;
}

void bubbleSort(int size) {
    for (int i = 0; i < size - 1; ++i) {
        for (int j = 0; j < size - i - 1; ++j) {
            if (distances[j] > distances[j + 1]) {
                //sort distances array
                float temp = distances[j];
                distances[j] = distances[j + 1];
                distances[j + 1] = temp;

                //sort indexes array
                uint temp2 = collisions[j];
                collisions[j] = collisions[j + 1];
                collisions[j + 1] = temp2;
            }
        }
    }
}

float distance(vec3 p1, vec3 p2){
    vec3 diff = p1 - p2;
    return length(diff);
}

bool checkCubeCollisionDirection(vec3 cubeMin, vec3 cubeMax, vec3 vertex, vec3 direction) {
    float tmin = (cubeMin.x - vertex.x) / direction.x;
    float tmax = (cubeMax.x - vertex.x) / direction.x;

    if (tmin > tmax) {
        float temp = tmin;
        tmin = tmax;
        tmax = temp;
    }

    float tymin = (cubeMin.y - vertex.y) / direction.y;
    float tymax = (cubeMax.y - vertex.y) / direction.y;

    if (tymin > tymax) {
        float temp = tymin;
        tymin = tymax;
        tymax = temp;
    }

    if ((tmin > tymax) || (tymin > tmax)) {
        return false;
    }

    if (tymin > tmin) {
        tmin = tymin;
    }

    if (tymax < tmax) {
        tmax = tymax;
    }

    float tzmin = (cubeMin.z - vertex.z) / direction.z;
    float tzmax = (cubeMax.z - vertex.z) / direction.z;

    if (tzmin > tzmax) {
        float temp = tzmin;
        tzmin = tzmax;
        tzmax = temp;
    }

    if ((tmin > tzmax) || (tzmin > tmax)) {
        return false;
    }

    return true;
}

bool checkCubeCollision(vec3 cubeMin, vec3 cubeMax, vec3 origin, vec3 destination) {
    vec3 direction = normalize(destination - origin);
    vec3 tmin = (cubeMin - origin) / direction;
    vec3 tmax = (cubeMax - origin) / direction;

    vec3 t1 = min(tmin, tmax);
    vec3 t2 = max(tmin, tmax);

    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);

    if (tNear > tFar || tFar < 0.0) {
        return false;
    }

    return true;
}


bool checkIsShadow(vec3 center, vec3 vertex){

    //get all the sphere in collision with reflection
    //we keep only 10 of them, which are the 10 closest to vertex position
    uint i = 0;
    int nbCollisions = 0;
    float maxDist = distance(vertex, center);
    while (i < dataSize) {
        vec3 nodeMin = vec3(data[i],data[i+1],data[i+2]);
        vec3 nodeMax = vec3(data[i+3],data[i+4],data[i+5]);
        vec3 nodeCenter = (nodeMin+nodeMax)/2.0;
        if (checkCubeCollision(nodeMin, nodeMax, vertex, center)){
            float dist = distance(vertex, nodeCenter);
            if (dist >= maxDist){
                i += 7 + uint(data[i+6]);
                continue;
            }
            if (nbCollisions == MAX_COLLISIONS_SHADOW){
                bubbleSort(MAX_COLLISIONS_SHADOW);
            }
            if (nbCollisions < MAX_COLLISIONS_SHADOW){
                collisions[nbCollisions] = i+6;
                distances[nbCollisions] = dist;
            }else{
                insert(dist, i+6, MAX_COLLISIONS_SHADOW);
            }
            nbCollisions++;
        }
        i += 7 + uint(data[i+6]);
    }

    for (uint i=0; i < MAX_COLLISIONS_SHADOW; i++){
        //we get the index where the vertices start in data
        //and how much of them we have
        float nbVertices = data[collisions[i]];
        bool foundIntersection = false;
        for (uint j = 0; j < nbVertices; j+=18){
            uint index = collisions[i]+1+j;
            vec3 v1 = vec3(data[index], data[index + 1], data[index + 2]);
            vec3 v2 = vec3(data[index + 6], data[index + 7], data[index + 8]);
            vec3 v3 = vec3(data[index + 12], data[index + 13], data[index + 14]);

            if (v1 == vertex || v2 == vertex || v3 == vertex){
                continue;
            }

            if(checkCollisionTriangle(v1, v2, v3, vertex, center)){
                return true;
            }
        }
    }
    return false;
}

vec3 checkCollisionTriangleDirection(vec3 v1, vec3 v2, vec3 v3, vec3 vertex, vec3 direction) {
    vec3 edge1 = v2 - v1;
    vec3 edge2 = v3 - v1;
    vec3 pvec = cross(direction, edge2);
    float det = dot(edge1, pvec);

    if (det > -0.0001 && det < 0.0001) {
        return vec3(0.0); // Ray and triangle are parallel, no intersection
    }

    float invDet = 1.0 / det;
    vec3 tvec = vertex - v1;
    float u = dot(tvec, pvec) * invDet;

    if (u < 0.0 || u > 1.0) {
        return vec3(0.0); // Intersection point is outside the triangle, no intersection
    }

    vec3 qvec = cross(tvec, edge1);
    float v = dot(direction, qvec) * invDet;

    if (v < 0.0 || u + v > 1.0) {
        return vec3(0.0); // Intersection point is outside the triangle, no intersection
    }

    float t = dot(edge2, qvec) * invDet;

    if (t >= 0.0) {
        return vertex + t * direction; // Intersection point with triangle
    }

    return vec3(0.0); // No intersection with triangle
}


bool checkSphereCollisionDirection(vec3 center, float radius, vec3 vertex, vec3 direction) {
    vec3 oc = vertex - center;
    float a = dot(direction, direction);
    float b = 2.0 * dot(oc, direction);
    float c = dot(oc, oc) - radius * radius;

    float discriminant = b * b - 4.0 * a * c;

    if (discriminant > 0.0) {
        float t1 = (-b - sqrt(discriminant)) / (2.0 * a);
        float t2 = (-b + sqrt(discriminant)) / (2.0 * a);

        if (t1 >= 0.0 || t2 >= 0.0) {
            return true; // Intersection with sphere found
        }
    }

    return false; // No intersection with sphere found
}

CollisionData checkCollision(vec3 vertex, vec3 normal) {
    vec3 cameraToVertex = vertex - camera;
    vec3 reflectedDirection = normalize(cameraToVertex - normal * 2.0 * dot(cameraToVertex, normal));
    vec3 reflected_position = vec3(0.0);

    //get all the sphere in collision with reflection
    //we keep only 10 of them, which are the 10 closest to vPosition
    uint i = 0;
    int nbCollisions = 0;
    while (i < dataSize) {
        vec3 nodeMin = vec3(data[i],data[i+1],data[i+2]);
        vec3 nodeMax = vec3(data[i+3],data[i+4],data[i+5]);
        vec3 nodeCenter = (nodeMin+nodeMax)/2.0;
        if (checkCubeCollisionDirection(nodeMin, nodeMax, vertex, reflectedDirection)){
            float dist = distance(vPosition, nodeCenter);
            if (nbCollisions == MAX_COLLISIONS_REFLECTION){
                bubbleSort(MAX_COLLISIONS_REFLECTION);
            }
            if (nbCollisions < MAX_COLLISIONS_REFLECTION){
                collisions[nbCollisions] = i+6;
                distances[nbCollisions] = dist;
            }else{
                insert(dist, i+6, MAX_COLLISIONS_REFLECTION);
            }
            nbCollisions++;
        }
        i += 7 + uint(data[i+6]);
    }

    CollisionData collision;
    collision.vertex = vec3(0.0);
    //now we find the collision between the reflected ray nd triangles
    //in one of the sphere we sorted precedently
    for (i=0; i < MAX_COLLISIONS_REFLECTION; i++){
        //we get the index where the vertices start in data
        //and how much of them we have
        float nbVertices = data[collisions[i]];
        bool foundIntersection = false;
        for (uint j = 0; j < nbVertices; j+=18){
            uint index = collisions[i]+1+j;
            vec3 v1 = vec3(data[index], data[index + 1], data[index + 2]);
            vec3 uv1 = vec3(data[index + 3], data[index + 4], data[index + 5]);
            vec3 v2 = vec3(data[index + 6], data[index + 7], data[index + 8]);
            vec3 uv2 = vec3(data[index + 9], data[index + 10], data[index + 11]);
            vec3 v3 = vec3(data[index + 12], data[index + 13], data[index + 14]);
            vec3 uv3 = vec3(data[index + 15], data[index + 16], data[index + 17]);

            if (v1 == vertex || v2 == vertex || v3 == vertex){
                continue;
            }

            vec3 collisionPoint = checkCollisionTriangleDirection(v1, v2, v3, vertex, reflectedDirection);

            if (length(collisionPoint) > 0.0 && (length(reflected_position) == 0.0 || length(collisionPoint - vertex) < length(reflected_position - vertex))) {
                reflected_position = collisionPoint;
                foundIntersection = true;

                //we take the average color of the triangle
                vec3 c1 = texture(textureArray, uv1).xyz;
                vec3 c2 = texture(textureArray, uv2).xyz;
                vec3 c3 = texture(textureArray, uv3).xyz;
                if (uv1.z == -1 || uv2.z == -1 || uv3.z == -1){
                    c1 = defaultColor;
                    c2 = defaultColor;
                    c3 = defaultColor;
                }
                collision.color = (c1+c2+c3)/3;
                collision.vertex = reflected_position;
            }
        }
        if (foundIntersection)
        break;
    }

    return collision;
}



vec3 applyDiffusionAndSpecular(vec3 position){
    vec3 normal = normalize(vNormal);
    vec3 ray = normalize(position - camera);
    vec3 reflected_ray = reflect(ray, normal);

    vec3 totalLight = vec3(0.0);
    vec3 center = vec3(0.0);

    //we get diffusion
    for (int i = 0; i < numLights*3; i+=3) {
        vec3 lightPos = vec3(lightPositions[i], lightPositions[i+1], lightPositions[i+2]);
        vec3 light_dir = normalize(lightPos - position);

        float coefDiffuse = clamp(dot(normal, light_dir), 0, 1) * lightIntensity;
        float coefSpecular = clamp(dot(reflected_ray, light_dir), 0, 1) * lightIntensity;
        float coef = coefDiffuse + pow(coefSpecular,10);

        totalLight += coef * lightColor;
        center += lightPos;
    }
    center /= float(numLights);

    if (checkIsShadow(center, position)){
        return vec3(0.0);
    }else{
        return totalLight;
    }
    //return totalLight;
}

vec3 applyReflection(vec3 uvColor){
    vec3 res = applyDiffusionAndSpecular(vPosition)*uvColor;
    CollisionData reflection = checkCollision(vPosition, vNormal);
    if (vPosition.y < 0 && reflection.vertex != vec3(0.0)){
        res = res * 0.3 + applyDiffusionAndSpecular(reflection.vertex)*reflection.color;
    }
    return res;
}

void main() {
    vec4 uvColor;
    if (uv.z != -1){
        uvColor = texture(textureArray, uv);
    }else{
        uvColor = vec4(defaultColor,1.0);
    }
    color = applyReflection(uvColor.xyz);
    //color = uvColor.xyz;
    a = uvColor.a;
    gl_Position = worldToProj_matrix * vec4(vPosition, 1.0);
}