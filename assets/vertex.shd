#version 450

in vec3 vPosition;
in vec3 vNormal;

uniform vec3 vColor;
uniform mat4 worldToProj_matrix;
uniform vec3 cameraPos;

uniform vec3 lightPosition;
uniform vec3 lightColor;
uniform float lightIntensity;

out vec3 color;

void main() {
    vec3 normal = normalize(vNormal);
    vec3 light_dir = normalize(lightPosition-vPosition);
    vec3 ray = normalize(vPosition-cameraPos);
    vec3 reflected_ray = reflect(ray, normal);
    float coefDiffuse = clamp(dot(normal, light_dir),0,1)*lightIntensity;
    float coefSpecular = clamp(dot(reflected_ray, light_dir),0,1)*lightIntensity;
    float coef = coefDiffuse + coefSpecular;
    color = coef * vColor;
    gl_Position =  worldToProj_matrix*vec4(vPosition,1.0);
}